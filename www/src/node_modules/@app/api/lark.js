import axios from 'axios';

// TODO: to refactor, this is shit code.
const APP_ID = LARK_APP_ID;
const APP_SECRET = LARK_APP_SECRET;
const CHANNEL_ID = LARK_CHANNEL;
const BASE_URL = 'https://open.larksuite.com/open-apis/';

async function send(url, data, headers = {}) {
    console.log(`LARK: post ${url}`);
    try {
        const response = await axios({
            method: 'post',
            baseURL: BASE_URL,
            url,
            data,
            headers
        });
        return new Promise(resolve => resolve(response.data));
    } catch (error) {
        throw error;
    }
}

export async function message(issueNumber, testIssue, testCase, url, devLarkId, qaLarkId) {
    try {
        const token = await send(
            'auth/v3/tenant_access_token/internal/', 
            { app_id: APP_ID, app_secret: APP_SECRET }
        ).then(r => r.code == 0 ? r.tenant_access_token:false);
        if (token === false) {
            return false;
        }

        let title = `[QA FAILED] `;
        if (issueNumber) {
            title = title + ` ${issueNumber} - `
        } 
        if (testIssue) {
            title = title + testIssue;
        }
        let note = '';
        if (devLarkId) {
            note = note + `Developer in charge <at id=${devLarkId}></at>`;
        }
        if (qaLarkId) {
            if (note != '') {
                note = note + ', ';
            }
            note = note + `QA by <at id=${qaLarkId}></at>`;
        }
        if (url) {
            if (note != '') {
                note = note + '\n\n';
            }
            note = note + `<a>${url}</a>`
        }
        const data = {
            chat_id: CHANNEL_ID,
            msg_type: "interactive",
            card: {
                config: { wide_screen_mode: true },
                header: { title: { tag: "plain_text", content: title } },
                elements: [
                    {
                        tag: "div",
                        fields: [
                            {
                                is_short: false,
                                text: {
                                    tag: "lark_md",
                                    content: `\n${testCase}\n\n`
                                }
                            },
                            {
                                is_short: false,
                                text: {
                                    tag: "lark_md",
                                    content: note
                                }
                            }
                        ]
                    }
                ]
            }
        };
        
        return sent = await send(
            'message/v4/send/', 
            data,
            { Authorization: `Bearer ${token}` }
        ).then(r => r.code == 0);
    } catch (error) {
        return false;   
    }
}
