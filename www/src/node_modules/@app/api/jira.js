import axios from 'axios';
import { JIRA_BASE_URL } from '@app/configs';

const BASE_URL = JIRA_BASE_URL;
const TOKEN = JIRA_TOKEN;

export function updateCustomField(issue, status, link) {
    return put(`/issue/${issue}`, {
        overrideScreenSecurity: true,
        overrideEditableFlag: true,
        fields: {
            customfield_10031: link,
            customfield_10032: status
        }
    });
}

export function addStatusComment(issue, status, description, name, time, link) {
    let color;
    let panelType;
    switch (status.toLowerCase()) {
        case 'passed':
        case 'success':
            color = '#36b37e';
            panelType = 'success';
            break;
        case 'failed':
        case 'danger':
            color = '#ff5630';
            panelType = 'error';
            break;
        default:
            color = '#ff991f';
            panelType = 'warning';
            break;
    }
    const payload = {
        body: {
            version: 1,
            type: "doc",
            content: [
                {
                    type: "panel",
                    attrs: { panelType },
                    content: [
                        {
                            type: "paragraph",
                            content: [
                                {
                                    type: "text",
                                    text: `${description}: ${status}`,
                                    marks: [
                                        { type: "strong" },
                                        { type: "textColor", attrs: { color } }
                                    ]
                                },
                                { type: "hardBreak" },
                                {
                                    type: "text",
                                    text: `Submitted by ${name} at ${time}.`,
                                    marks: [ { type: "textColor", attrs: { color } } ]
                                }
                            ]
                        }
                    ]
                },
                {
                    type: "paragraph",
                    content: [
                        { type: "text", text: "See result: " },
                        {
                            type: "text",
                            text: link,
                            marks: [ { type: "link", attrs: { href: link } } ]
                        }
                    ]
                }
            ]
        }
    };
    return post(`/issue/${issue}/comment`, payload);
}

export async function getIssue(issue) {
    const response = await get(`/issue/${issue}`, {
        fields: 'key,issuetype,summary,description,project,createdAt,priority,labels,assignee,creator,reporter,status,components,attachment,customfield_10031,customfield_10032',
        expand: 'renderedFields'
    });
    if (response.errors === null) {
        return false;
    }
    const fields = response.fields;
    const rendered = response.renderedFields;
    return {
        key: response.key,
        type: fields.issuetype.name,
        summary: fields.summary,
        description: rendered.description,
        project: fields.project.name,
        createdAt: fields.created,
        priority: fields.priority.name,
        labels: fields.labels,
        assignee: {
            name: fields.assignee.displayName,
            accountId: fields.assignee.accountId
        },
        creator: {
            name: fields.creator.displayName,
            accountId: fields.creator.accountId
        },
        reporter: {
            name: fields.reporter.displayName,
            accountId: fields.reporter.accountId
        },
        status: fields.status.name,
        components: fields.components.map(v => v.name),Â 
        attachments: fields.attachment.map(v => {
            const { filename, size, mimeType, content, thumbnail } = v;
            return { filename, size, mimeType, content, thumbnail };
        })
    };
}

async function send({ method, path, data }) {
    console.log(`JIRA: ${method} ${path}`);
    try {
        const response = await axios({
            method,
            baseURL: BASE_URL,
            url: path,
            data,
            headers: { 
                Authorization: `Basic ${TOKEN}` 
            }
        });
        return new Promise(resolve => resolve(response.data));
    } catch (error) {
        throw error;
    }
}

export function post(path, data) {
    return send({ method: 'post', path, data });
}

export function put(path, data) {
    return send({ method: 'put', path, data });
}

export function del(path) {
    return send({ method: 'delete', path });
}

export function get(path, data = {}) {
    const params = Object.keys(data).map(key => `${key}=${data[key]}`).join('&');
    return send({
        method: 'get',
        path: `${path}${params ? '?' + params : ''}`,
        data: {}
    });
}

