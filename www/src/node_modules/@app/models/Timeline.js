import BaseModel from './BaseModel';
import * as api from '@app/api/timeline';
import moment from 'moment';
import { 
    STATUS_ACTIVE, 
    STATUS_DELETED
} from '@app/constants';

export default class TimelineModel extends BaseModel {

    constructor({ model = {}, token }) {
        super({ model, token, api });
        this.attributes = {
            id: null,
            user_id: null,
            title: null,
            start: null,
            end: null,
            status: null,
            ...model
        };
        // safe attributes to send for update/create API
        this.safeAttributes = ['user_id', 'title', 'start', 'end', 'status'];
        // attributes label for display, for active inputs
        // TODO: integrate with validate.js lib for error message
        this.labels = {
            id: 'ID',
            user_id: 'User',
            title: 'Title',
            start: 'Start Date',
            end: 'End Date',
            status: 'Status',
        };
        // check validate.js
        this.rules = {
            user_id: {
                presence: { allowEmpty: false },
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            title: {
                presence: { allowEmpty: false },
                type: "string",
            },
            start: {
                presence: { allowEmpty: false },
                datetime: {
                    dateOnly: true,
                    earliest: moment().subtract(6, 'M').format('YYYY-MM-DD'),
                    end: moment().add(6, 'M').format('YYYY-MM-DD')
                },
            },
            end: {
                presence: { allowEmpty: false },
                datetime: {
                    dateOnly: true,
                    earliest: moment().subtract(6, 'M').format('YYYY-MM-DD'),
                    end: moment().add(6, 'M').format('YYYY-MM-DD')
                },
            }
        };
        // all others options
        this.statusOptions = [
            { value: STATUS_ACTIVE, label: STATUS_ACTIVE },
            { value: STATUS_DELETED, label: STATUS_DELETED },
        ];
    }

    // TODO: Refactor this
    async delete() {
        if (this.isNewRecord()) {
            return false;
        }
        try {
            this.set('status', STATUS_DELETED);
            const response = await api.update(this.getId(), this.getSafeAttributes(), this.token);
            return response.success && response.status != 422;
        } catch (error) {
            return false;
        }
    }

}