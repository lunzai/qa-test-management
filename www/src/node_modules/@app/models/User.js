import BaseModel from './BaseModel';
import * as api from '@app/api/user';
import { 
    STATUS_ACTIVE, 
    STATUS_DELETED, 
    JOB_ROLE_USER,
    JOB_ROLE_DEVELOPER,
    JOB_ROLE_QA,
    JOB_ROLE_PM,
    JOB_ROLE_MANAGEMENT,
    ROLE_USER,
    ROLE_ADMIN,
    ROLE_TIMELINE,
} from '@app/constants';

export default class UserModel extends BaseModel {

    constructor({ model = {}, token }) {
        super({ model, token, api });
        this.attributes = {
            id: null,
            email: null,
            display_name: null,
            job_role: null,
            lark_id: null,
            status: null,
            roles: [],
            is_admin: null,
            ...model
        };
        // safe attributes to send for update/create API
        this.safeAttributes = [
            'email', 'display_name', 'job_role', 'lark_id', 'status',  
        ];
        // attributes label for display, for active inputs
        // TODO: integrate with validate.js lib for error message
        this.labels = {
            id: 'ID',
            email: 'Email',
            display_name: 'Name',
            job_role: 'Job Role',
            lark_id: 'Lark User ID',
            status: 'Status',
            roles: 'Roles',
            is_admin: 'Is Administrator',

            created_at: 'Created At',
            created_by: 'Created By',
            updated_at: 'Updated At',
            updated_by: 'Updated By',
        };
        // check validate.js
        this.rules = {
            email: {
                presence: { allowEmpty: false },
                email: true,
                type: "string",
                format: {
                    pattern: /.*@whitecoat\.(global|com\.sg)/i,
                    message: `not allowed`,
                }
            },
            display_name: {
                presence: { allowEmpty: false },
                type: "string",
                length: { minimum: 2 }
            },
            job_role: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [
                    JOB_ROLE_USER,
                    JOB_ROLE_DEVELOPER,
                    JOB_ROLE_QA,
                    JOB_ROLE_PM,
                    JOB_ROLE_MANAGEMENT,
                ],
            },
            lark_id: {
                type: "string",
                length: { minimum: 8 }
            },
            status: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [STATUS_ACTIVE, STATUS_DELETED],
            },
        };
        // all others options
        this.statusOptions = [
            { value: STATUS_ACTIVE, label: STATUS_ACTIVE },
            { value: STATUS_DELETED, label: STATUS_DELETED },
        ];
        this.jobRoleOptions = [
            { value: JOB_ROLE_USER, label: JOB_ROLE_USER },
            { value: JOB_ROLE_DEVELOPER, label: JOB_ROLE_DEVELOPER },
            { value: JOB_ROLE_QA, label: JOB_ROLE_QA },
            { value: JOB_ROLE_PM, label: JOB_ROLE_PM },
            { value: JOB_ROLE_MANAGEMENT, label: JOB_ROLE_MANAGEMENT },
        ];
        this.validRoles = [
            ROLE_USER,
            ROLE_ADMIN,
            ROLE_TIMELINE,
        ];
    }

    hasRole(role) {
        return this.attributes.roles.includes(role) !== false;
    }

    getRoles() {
        return this.attributes.roles;
    }

    isAdmin() {
        return this.attributes.is_admin;
    }

    async assign(role) {
        if (this.validRoles.includes(role) === false || this.isNewRecord()) {
            return false;
        }
        try {
            let response;
            response = await api.assignRole(this.getId(), role, this.token);
            if (response.success) {
                this.attributes.roles.push(role);
                return true;
            }
            return false;
        } catch (error) {
            return false;
        }
    }

    async revoke(role) {
        if (this.validRoles.includes(role) === false || this.isNewRecord()) {
            return false;
        }
        try {
            let response;
            response = await api.revokeRole(this.getId(), role, this.token);
            if (response.success) {
                this.attributes.roles = this.attributes.roles.filter(r => r != role);
                return true;
            }
            return false;
        } catch (error) {
            return false;
        }
    }

}