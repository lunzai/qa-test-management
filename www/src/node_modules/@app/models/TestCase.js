import BaseModel from './BaseModel';
import * as api from '@app/api/testCase';
import { STATUS_ACTIVE, STATUS_INACTIVE } from '@app/constants';

export default class TestCaseModel extends BaseModel {

    constructor({ model = {}, token }) {
        super({ model, token, api });
        this.attributes = {
            id: null,
            issue_id: null,
            description: null,
            platform: null,
            pre_condition: null,
            replicate_step: null, 
            expected_result: null,
            status: null,
            ...model
        };
        // safe attributes to send for update/create API
        this.safeAttributes = [
            'issue_id', 'description', 'platform', 'pre_condition', 'status', 
            'replicate_step', 'expected_result', 'short_description'
        ];
        // attributes label for display, for active inputs
        // TODO: integrate with validate.js lib for error message
        this.labels = {
            id: 'ID',
            issue_id: 'Test Issue',
            short_description: 'Short Description',
            description: 'Description',
            platform: 'Platform',
            pre_condition: 'Pre-condition',
            replicate_step: 'Steps to Replicate',
            expected_result: 'Expected Result',
            status: 'Status',

            test_status: 'Latest Test Status',
            created_at: 'Created At',
            created_by: 'Created By',
            updated_at: 'Updated At',
            updated_by: 'Updated By',
        };
        // check validate.js
        this.rules = {
            issue_id: {
                presence: { allowEmpty: false },
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            short_description: {
                type: "string",
                presence: { allowEmpty: false },
            },
            description: {
                type: "string",
                presence: { allowEmpty: false },
            },
            platform: {
                type: "string",
            },
            pre_condition: {
                type: "string",
            },
            replicate_step: {
                type: "string",
                presence: { allowEmpty: false },
            },
            expected_result: {
                type: "string",
                presence: { allowEmpty: false },
            },
            status: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [STATUS_ACTIVE, STATUS_INACTIVE],
            },
        };
        // all others options
        this.statusOptions = [
            { value: STATUS_ACTIVE, label: STATUS_ACTIVE },
            { value: STATUS_INACTIVE, label: STATUS_INACTIVE },
        ];
    }

    getIssue() {
        return this.attributes.issue;
    }

    getGroup() {
        return this.getIssues().group;
    }

    getResults() {
        return this.attributes.results;
    }

}