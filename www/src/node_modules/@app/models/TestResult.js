import BaseModel from './BaseModel';
import * as api from '@app/api/testResult';
import { 
    STATUS_ACTIVE, 
    STATUS_INACTIVE,
    TEST_STATUS_PASSED,
    TEST_STATUS_FAILED,
    TEST_STATUS_UNABLE_TO_TEST,
} from '@app/constants';

export default class TestResultModel extends BaseModel {

    constructor({ model = {}, token }) {
        super({ model, token, api });
        this.attributes = {
            id: null,
            test_case_id: null,
            tester_user_id: null,
            version: null,
            platform: null,
            actual_result: null,
            status: null,
            test_status: null,
            ...model
        };
        // safe attributes to send for update/create API
        this.safeAttributes = [
            'test_case_id', 'tester_user_id', 'version', 'platform', 
            'actual_result', 'status', 'test_status'
        ];
        // attributes label for display, for active inputs
        // TODO: integrate with validate.js lib for error message
        this.labels = {
            id: 'ID',
            test_case_id: 'Test Case',
            tester_user_id: 'Tester',
            version: 'Version',
            platform: 'Platform',
            actual_result: 'Actual Result',
            status: 'Status',
            test_status: 'Test Result',

            created_at: 'Submitted At',
            created_by: 'Submitted By',
            updated_at: 'Updated At',
            updated_by: 'Updated By',
        };
        // check validate.js
        this.rules = {
            test_case_id: {
                presence: { allowEmpty: false },
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            tester_user_id: {
                presence: { allowEmpty: false },
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            version: {
                type: "string",
            },
            platform: {
                type: "string",
            },
            actual_result: {
                type: "string",
                presence: { allowEmpty: false },
            },
            status: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [STATUS_ACTIVE, STATUS_INACTIVE],
            },
            test_status: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [
                    TEST_STATUS_PASSED, 
                    TEST_STATUS_FAILED, 
                    TEST_STATUS_UNABLE_TO_TEST
                ],
            },
        };
        // all others options
        this.statusOptions = [
            { value: STATUS_ACTIVE, label: STATUS_ACTIVE },
            { value: STATUS_INACTIVE, label: STATUS_INACTIVE },
        ];
        this.testStatusOptions = [
            { value: TEST_STATUS_PASSED, label: TEST_STATUS_PASSED },
            { value: TEST_STATUS_FAILED, label: TEST_STATUS_FAILED },
            { value: TEST_STATUS_UNABLE_TO_TEST, label: TEST_STATUS_UNABLE_TO_TEST },
        ];
    }

    getTestCase() {
        return this.attributes.testCase;
    }

    getTester() {
        return this.attributes.user;
    }

}