import BaseModel from './BaseModel';
import * as api from '@app/api/testIssue';
import { STATUS_ACTIVE, STATUS_INACTIVE, STATUS_DEPLOYED } from '@app/constants';

export default class TestIssueModel extends BaseModel {

    constructor({ model = {}, token }) {
        super({ model, token, api });
        this.attributes = {
            id: null,
            group_id: null,
            qa_user_id: null,
            developer_user_id: null,
            name: null,
            description: null,
            jira_number: null,
            jira_url: null,
            lark_url: null,
            status: null,
            ...model
        };
        // safe attributes to send for update/create API
        this.safeAttributes = [
            'group_id', 'qa_user_id', 'developer_user_id', 'name', 
            'description', 'jira_number', 'jira_url', 'lark_url', 
            'status',  
        ];
        // attributes label for display, for active inputs
        // TODO: integrate with validate.js lib for error message
        this.labels = {
            id: 'ID',
            group_id: 'Test Group',
            qa_user_id: 'QA',
            developer_user_id: 'Developer',
            name: 'Name',
            description: 'Description',
            jira_number: 'JIRA Issue',
            jira_url: 'JIRA Issue URL',
            lark_url: 'Lark Spec URL',
            status: 'Status',

            test_status: 'Test Status',
            total_count: 'Total',
            passed_count: 'Passed',
            failed_count: 'Failed',
            pending_count: 'Pending',
            created_at: 'Created At',
            created_by: 'Created By',
            updated_at: 'Updated At',
            updated_by: 'Updated By',
        };
        // check validate.js
        this.rules = {
            group_id: {
                presence: { allowEmpty: false },
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            qa_user_id: {
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            developer_user_id: {
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            name: {
                type: "string",
                presence: { allowEmpty: false },
            },
            description: {
                type: "string",
            },
            jira_number: {
                type: "string",
                format: {
                    pattern: "[A-Z]+-[0-9]+",
                    flag: "i",
                },
            },
            jira_url: {
                type: "string",
                url: true,
                format: {
                    pattern: "^http(s)?:\/\/whitecoatglobal\.atlassian\.net.*",
                    flag: "i",
                },
            },
            lark_url: {
                type: "string",
                url: true,
                format: {
                    pattern: "^http(s)?:\/\/e2brv21nn6\.larksuite\.com.*",
                    flag: "i",
                },
            },
            status: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [STATUS_ACTIVE, STATUS_INACTIVE, STATUS_DEPLOYED],
            },
        };
        // all others options
        this.statusOptions = [
            { value: STATUS_ACTIVE, label: STATUS_ACTIVE },
            { value: STATUS_INACTIVE, label: STATUS_INACTIVE },
            { value: STATUS_DEPLOYED, label: STATUS_DEPLOYED },
        ]
    }

    getGroup() {
        return this.attributes.group;
    }

    getQa() {
        return this.attributes.qa;
    }

    getDeveloper() {
        return this.attributes.developer;
    }

    getTestCases() {
        return this.attributes.testCases;
    }

}