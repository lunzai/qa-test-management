import BaseModel from './BaseModel';
import * as api from '@app/api/bugFeature';
import { 
    PRIORITY_LOW, PRIORITY_MEDIUM, PRIORITY_HIGH, PRIORITY_BLOCKER,
    STATUS_ACTIVE, STATUS_DELETED, STATUS_DEPLOYED,
    FIX_STATUS_PENDING_INVESTIGATION, FIX_STATUS_UNABLE_TO_REPLICATE,
    FIX_STATUS_NEED_MORE_INFORMATION, FIX_STATUS_WORK_IN_PROGRESS,
    FIX_STATUS_TO_DO, FIX_STATUS_FIXED, FIX_STATUS_KIV,
    TYPE_BUG, TYPE_FEATURE
} from '@app/constants';

export default class BugFeatureModel extends BaseModel {

    constructor({ model = {}, token }) {
        super({ model, token, api });
        this.attributes = {
            id: null,
            reporter_user_id: null,
            qa_user_id: null,
            developer_user_id: null,
            title: null,
            description: null,
            jira_number: null,
            fix_status: null,
            priority: null,
            status: null,
            type: null,
            ...model
        };
        // safe attributes to send for update/create API
        this.safeAttributes = [
            'reporter_user_id', 'qa_user_id', 'developer_user_id', 'title', 
            'description', 'jira_number', 'fix_status', 'priority', 'status',
            'type'
        ];
        // attributes label for display, for active inputs
        // TODO: integrate with validate.js lib for error message
        this.labels = {
            id: 'ID',
            reporter_user_id: 'Reporter',
            qa_user_id: 'QA',
            developer_user_id: 'Developer',
            title: 'Title',
            description: 'Description',
            jira_number: 'JIRA Issue',
            fix_status: 'Fix Status',
            priority: 'Priority',
            status: 'Status',
            type: 'Type',
        };
        // check validate.js
        this.rules = {
            reporter_user_id: {
                presence: { allowEmpty: false },
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            qa_user_id: {
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            developer_user_id: {
                numericality: {
                    onlyInteger: true,
                    greaterThan: 0,
                },
            },
            title: {
                type: "string",
                presence: { allowEmpty: false },
            },
            description: {
                type: "string",
            },
            jira_number: {
                type: "string",
                format: {
                    pattern: "[A-Z]+-[0-9]+",
                    flag: "i",
                },
            },
            status: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [STATUS_ACTIVE, STATUS_DELETED, STATUS_DEPLOYED],
            },
            fix_status: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [
                    FIX_STATUS_PENDING_INVESTIGATION, FIX_STATUS_UNABLE_TO_REPLICATE,
                    FIX_STATUS_NEED_MORE_INFORMATION, FIX_STATUS_WORK_IN_PROGRESS,
                    FIX_STATUS_TO_DO, FIX_STATUS_FIXED, FIX_STATUS_KIV
                ],
            },
            priority: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [PRIORITY_LOW, PRIORITY_MEDIUM, PRIORITY_HIGH, PRIORITY_BLOCKER],
            },
            type: {
                type: "string",
                presence: { allowEmpty: false },
                inclusion: [TYPE_BUG, TYPE_FEATURE],
            },
        };

        this.statusOptions = [
            { value: STATUS_ACTIVE, label: STATUS_ACTIVE },
            { value: STATUS_DEPLOYED, label: STATUS_DEPLOYED },
            { value: STATUS_DELETED, label: STATUS_DELETED },
        ];

        this.fixStatusOptions = [
            { value: FIX_STATUS_PENDING_INVESTIGATION, label: FIX_STATUS_PENDING_INVESTIGATION },
            { value: FIX_STATUS_UNABLE_TO_REPLICATE, label: FIX_STATUS_UNABLE_TO_REPLICATE },
            { value: FIX_STATUS_NEED_MORE_INFORMATION, label: FIX_STATUS_NEED_MORE_INFORMATION },
            { value: FIX_STATUS_WORK_IN_PROGRESS, label: FIX_STATUS_WORK_IN_PROGRESS },
            { value: FIX_STATUS_TO_DO, label: FIX_STATUS_TO_DO },
            { value: FIX_STATUS_FIXED, label: FIX_STATUS_FIXED },
            { value: FIX_STATUS_KIV, label: FIX_STATUS_KIV },
        ];

        this.priorityOptions = [
            { value: PRIORITY_LOW, label: PRIORITY_LOW },
            { value: PRIORITY_MEDIUM, label: PRIORITY_MEDIUM },
            { value: PRIORITY_HIGH, label: PRIORITY_HIGH },
            { value: PRIORITY_BLOCKER, label: PRIORITY_BLOCKER },
        ];

        this.typeOptions = [
            { value: TYPE_BUG, label: TYPE_BUG },
            { value: TYPE_FEATURE, label: TYPE_FEATURE },
        ];
    }

    isBug() {
        return this.attributes.type == TYPE_BUG;
    }

    isFeature() {
        return this.attributes.type == TYPE_FEATURE;
    }

    isResolved() {
        return this.fix_status == FIX_STATUS_FIXED;
    }

    getReporter() {
        return this.attributes.reporter;
    }

    getQa() {
        return this.attributes.qa;
    }

    getDeveloper() {
        return this.attributes.developer;
    }

}